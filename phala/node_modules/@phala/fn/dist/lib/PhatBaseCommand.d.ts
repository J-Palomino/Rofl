import { OnChainRegistry, PinkContractPromise, PinkContractQuery, EvmAccountMappingProvider, KeyringPairProvider, type PinkContractTx, type LiteralRpc, type AnyProvider } from '@phala/sdk';
import { ApiPromise } from '@polkadot/api';
import { Abi } from '@polkadot/api-contract';
import { type KeyringPair } from '@polkadot/keyring/types';
import type { Result, Vec, u64, u8, Text, Bool, Struct } from '@polkadot/types';
import type { AccountId, ChainType, Hash } from '@polkadot/types/interfaces';
import BaseCommand from '../lib/BaseCommand';
export interface ParsedFlags {
    readonly build: boolean;
    readonly webpack: string;
    readonly endpoint: string;
    readonly mode: string;
    readonly brickProfileFactory: string;
    readonly rpc: string;
    readonly consumerAddress: string;
    suri: string;
    readonly accountFilePath: string;
    readonly accountPassword: string;
    privateKey: string;
    readonly mnemonic: string;
    readonly addressIndex: number;
    readonly coreSettings: string;
    readonly pruntimeUrl: string;
    readonly externalAccountId: string;
    readonly jsRunner: string;
}
interface ParsedArgs {
    readonly script: string;
}
export interface ExternalAccountCodec extends Struct {
    id: u64;
    address: Vec<u8>;
    rpc: Text;
}
export interface WorkflowCodec extends Struct {
    id: u64;
    name: Text;
    enabled: Bool;
    commandline: Text;
}
export type BrickProfileFactoryContract = PinkContractPromise<{
    version: PinkContractQuery<[], u64[]>;
    owner: PinkContractQuery<[], AccountId>;
    userCount: PinkContractQuery<[], u64>;
    profileCodeHash: PinkContractQuery<[], Hash>;
    getUserProfileAddress: PinkContractQuery<[], Result<AccountId, any>>;
}, {
    setProfileCodeHash: PinkContractTx<[string]>;
    createUserProfile: PinkContractTx<[]>;
}>;
export type BrickProfileContract = PinkContractPromise<{
    getJsRunner: PinkContractQuery<[], Result<AccountId, any>>;
    getAllEvmAccounts: PinkContractQuery<[
    ], Result<Vec<ExternalAccountCodec>, any>>;
    getWorkflow: PinkContractQuery<[number | u64], Result<WorkflowCodec, any>>;
    workflowCount: PinkContractQuery<[], u64>;
    externalAccountCount: PinkContractQuery<[], u64>;
    getEvmAccountAddress: PinkContractQuery<[
        number | u64
    ], Result<AccountId, any>>;
}, {
    config: PinkContractTx<[string | AccountId]>;
    generateEvmAccount: PinkContractTx<[string | Text]>;
    addWorkflowAndAuthorize: PinkContractTx<[
        string | Text,
        string | Text,
        number | u64
    ]>;
}>;
export type ActionOffChainRollupContract = PinkContractPromise<{
    getAttestAddress: PinkContractQuery<[], Vec<u8>, any>;
}, {
    configCoreScript: PinkContractTx<[string]>;
}>;
export default abstract class PhatBaseCommand extends BaseCommand {
    static args: {
        script: import("@oclif/core/lib/interfaces/parser").Arg<string, Record<string, unknown>>;
    };
    static flags: {
        envFilePath: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        accountFilePath: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        accountPassword: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        suri: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        privateKey: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        mnemonic: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        addressIndex: import("@oclif/core/lib/interfaces").OptionFlag<number, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        endpoint: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        rpc: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        brickProfileFactory: import("@oclif/core/lib/interfaces").OptionFlag<string, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        consumerAddress: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        coreSettings: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        pruntimeUrl: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        externalAccountId: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        mode: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        build: import("@oclif/core/lib/interfaces").BooleanFlag<boolean>;
        jsRunner: import("@oclif/core/lib/interfaces").OptionFlag<string, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
    };
    parsedFlags: ParsedFlags;
    parsedArgs: ParsedArgs;
    protected _isTestnet: boolean;
    init(): Promise<void>;
    getEndpoint(): LiteralRpc;
    getBrickProfileFactoryContractId(endpoint: string): Promise<string>;
    getJsRunnerContractId(endpoint: string): Promise<string>;
    getBrickProfileContractId({ endpoint, registry, provider, }: {
        endpoint: string;
        registry: OnChainRegistry;
        provider: AnyProvider;
    }): Promise<`0x${string}`>;
    connect({ endpoint, }: {
        endpoint: LiteralRpc;
    }): Promise<[ApiPromise, OnChainRegistry, ChainType]>;
    getRollupAbi(): Promise<Abi>;
    buildOrGetScriptPath(): Promise<string>;
    promptEvmAccountId({ contract, }: {
        contract: BrickProfileContract;
    }): Promise<any>;
    promptProjectName(defaultName: string): Promise<string>;
    promptRpc(message?: string): Promise<string>;
    promptConsumerAddress(message?: string): Promise<string>;
    promptBrickProfileFactory(message?: string): Promise<string>;
    promptJsRunner(message?: string): Promise<string>;
    getProvider({ apiPromise, }: {
        apiPromise: ApiPromise;
    }): Promise<EvmAccountMappingProvider | KeyringPairProvider>;
    getDecodedPair({ suri, accountFilePath, accountPassword }: {
        suri?: string;
        accountFilePath?: string;
        accountPassword?: string;
    }): Promise<KeyringPair>;
    requestPairDecoding(pair: KeyringPair, options: {
        password?: string;
        message?: string;
    }): Promise<KeyringPair>;
    promptForPassword(message?: string): Promise<string>;
    promptForSuri(message?: string): Promise<string>;
    loadAbiByCodeHash(codeHash: string): Promise<string | Record<string, unknown>>;
    loadAbiByContractId(registry: OnChainRegistry, contractId: string): Promise<string | Record<string, unknown>>;
    verifyRpcEndpoint(endpoint: string): Promise<undefined>;
}
export {};
