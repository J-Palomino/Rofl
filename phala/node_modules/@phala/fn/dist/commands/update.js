"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const node_fs_1 = tslib_1.__importDefault(require("node:fs"));
const core_1 = require("@oclif/core");
const sdk_1 = require("@phala/sdk");
const inquirer_1 = tslib_1.__importDefault(require("inquirer"));
const PhatBaseCommand_1 = tslib_1.__importDefault(require("../lib/PhatBaseCommand"));
class Update extends PhatBaseCommand_1.default {
    async run() {
        const workflowId = await this.getWorkflowId();
        const buildScriptPath = await this.buildOrGetScriptPath();
        // connect to the endpoint
        const endpoint = this.getEndpoint();
        const [apiPromise, registry] = await this.connect({ endpoint });
        const provider = await this.getProvider({ apiPromise });
        // query the brick profile contract id
        this.action.start('Querying your Dashboard Profile contract ID');
        const brickProfileContractId = await this.getBrickProfileContractId({
            endpoint,
            registry,
            provider,
        });
        this.action.succeed(`Your Dashboard Profile contract ID: ${brickProfileContractId}`);
        // check current user workflow settings
        this.action.start('Checking your workflow settings');
        const brickProfileAbi = await this.loadAbiByContractId(registry, brickProfileContractId);
        const brickProfile = await (0, sdk_1.getContract)({
            client: registry,
            contractId: brickProfileContractId,
            abi: brickProfileAbi,
            provider,
        });
        const { output: workflowQuery } = await brickProfile.q.getWorkflow({
            args: [workflowId]
        });
        if (!workflowQuery.isOk || !workflowQuery.asOk.isOk) {
            this.error('Workflow not found.');
        }
        const actions = JSON.parse(workflowQuery.asOk.asOk.commandline.toString());
        const rollupAbi = await this.getRollupAbi();
        if (actions[0].config.codeHash !== rollupAbi.info.source.wasmHash.toHex()) {
            this.error(`The codeHash of the workflow is not matched with the ActionOffchainRollup contract.\nExpected: ${actions[0].config.codeHash}\nActual: ${rollupAbi.info.source.wasmHash.toHex()}\n`);
        }
        this.action.stop();
        // Step 4: Update the JS.
        this.action.start('Updating');
        const actionOffchainRollupContractId = actions[0].config.callee;
        const rollupContract = await (0, sdk_1.getContract)({
            client: registry,
            contractId: actionOffchainRollupContractId,
            abi: rollupAbi,
            provider,
        });
        await rollupContract.exec.configCoreScript({
            args: [node_fs_1.default.readFileSync(buildScriptPath, 'utf8')]
        });
        this.action.succeed(`The JavaScript code for workflow ${workflowId} has been updated.`);
        process.exit(0);
    }
    async getWorkflowId() {
        let { workflowId } = this.parsedFlags;
        if (workflowId === undefined) {
            if (process.env.WORKFLOW_ID !== undefined && !isNaN(parseFloat(process.env.WORKFLOW_ID))) {
                workflowId = Number(process.env.WORKFLOW_ID);
            }
            else {
                workflowId = await this.promptWorkflowId();
            }
        }
        if (isNaN(workflowId)) {
            return this.error('Invalid workflow ID: Must be a number or numeric string.');
        }
        return workflowId;
    }
    async promptWorkflowId(message = 'Please enter your workflow ID') {
        const { workflowId } = await inquirer_1.default.prompt([
            {
                name: 'workflowId',
                type: 'input',
                message,
            },
        ]);
        return Number(workflowId);
    }
}
Update.description = 'Update Phat Contract JS';
Update.args = {
    ...PhatBaseCommand_1.default.args
};
Update.flags = {
    ...PhatBaseCommand_1.default.flags,
    workflowId: core_1.Flags.integer({
        description: 'Workflow ID',
        required: false,
    }),
};
exports.default = Update;
