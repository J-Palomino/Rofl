"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@oclif/core");
const sdk_1 = require("@phala/sdk");
const PhatBaseCommand_1 = tslib_1.__importDefault(require("../lib/PhatBaseCommand"));
class AddEvmAccount extends PhatBaseCommand_1.default {
    async run() {
        const { evmRpcEndpoint } = this.parsedFlags;
        // verify the RPC endpoint
        await this.verifyRpcEndpoint(evmRpcEndpoint);
        // connect to the endpoint
        const endpoint = this.getEndpoint();
        const [apiPromise, registry] = await this.connect({ endpoint });
        const provider = await this.getProvider({ apiPromise });
        // query the brick profile contract id
        this.action.start('Querying your Dashboard Profile contract ID');
        const brickProfileContractId = await this.getBrickProfileContractId({
            endpoint,
            registry,
            provider,
        });
        this.action.succeed(`Your Dashboard Profile contract ID: ${brickProfileContractId}`);
        // generate evm account
        try {
            this.action.start('Adding EVM account');
            const brickProfileAbi = await this.loadAbiByContractId(registry, brickProfileContractId);
            const brickProfile = await (0, sdk_1.getContract)({
                client: registry,
                contractId: brickProfileContractId,
                abi: brickProfileAbi,
                provider,
            });
            const { output } = await brickProfile.q.externalAccountCount();
            if (output.isErr) {
                throw new Error(output.asErr.toString());
            }
            const externalAccountCount = output.asOk.toNumber();
            await brickProfile.exec.generateEvmAccount({
                args: [evmRpcEndpoint],
                waitFinalized: async () => {
                    const { output } = await brickProfile.q.externalAccountCount();
                    return output.isOk && output.asOk.toNumber() === externalAccountCount + 1;
                }
            });
            const { output: evmAccountAddressOutput } = await brickProfile.q.getEvmAccountAddress({
                args: [externalAccountCount]
            });
            if (evmAccountAddressOutput.isErr) {
                throw new Error(evmAccountAddressOutput.asErr.toString());
            }
            const evmAddress = evmAccountAddressOutput.asOk.asOk.toHex();
            this.action.succeed(`Added successfully, your new EVM account address is: [${externalAccountCount}] ${evmAddress}`);
            process.exit(0);
        }
        catch (error) {
            this.action.fail('Failed to add EVM account.');
            return this.error(error);
        }
    }
}
AddEvmAccount.description = 'Add EVM accounts';
AddEvmAccount.args = {
    ...PhatBaseCommand_1.default.args
};
AddEvmAccount.flags = {
    ...PhatBaseCommand_1.default.flags,
    evmRpcEndpoint: core_1.Flags.string({
        description: 'EVM RPC endpoint',
        required: true,
    }),
};
exports.default = AddEvmAccount;
