"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const sdk_1 = require("@phala/sdk");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const PhatBaseCommand_1 = tslib_1.__importDefault(require("../lib/PhatBaseCommand"));
class ListEvmAccounts extends PhatBaseCommand_1.default {
    async run() {
        // connect to the endpoint
        const endpoint = this.getEndpoint();
        const [apiPromise, registry] = await this.connect({ endpoint });
        const provider = await this.getProvider({ apiPromise });
        // query the brick profile contract id
        this.action.start('Querying your Dashboard Profile contract ID');
        const brickProfileContractId = await this.getBrickProfileContractId({
            endpoint,
            registry,
            provider,
        });
        this.action.succeed(`Your Dashboard Profile contract ID: ${brickProfileContractId}`);
        // querying your external accounts
        try {
            this.action.start('Querying your external accounts');
            const brickProfileAbi = await this.loadAbiByContractId(registry, brickProfileContractId);
            const brickProfile = await (0, sdk_1.getContract)({
                client: registry,
                contractId: brickProfileContractId,
                abi: brickProfileAbi,
                provider,
            });
            const { output } = await brickProfile.q.getAllEvmAccounts();
            if (output.isErr) {
                throw new Error(output.asErr.toString());
            }
            if (output.asOk.isErr) {
                throw new Error(output.asOk.asErr.toString());
            }
            this.action.stop();
            const accounts = output.asOk.asOk.map((i) => {
                const obj = i.toJSON();
                return {
                    id: obj.id,
                    address: obj.address,
                    rpcEndpoint: obj.rpc,
                };
            });
            if (accounts.length === 0) {
                this.log('You have no external accounts, please call `add-evm-account` first.');
                process.exit(0);
            }
            accounts.map(account => this.log(`[${account.id}] ${account.address} ${chalk_1.default.dim(account.rpcEndpoint)}`));
            process.exit(0);
        }
        catch (error) {
            this.action.fail('Failed to query your external accounts.');
            return this.error(error);
        }
    }
}
ListEvmAccounts.description = 'List EVM accounts';
ListEvmAccounts.args = {
    ...PhatBaseCommand_1.default.args
};
ListEvmAccounts.flags = {
    ...PhatBaseCommand_1.default.flags
};
exports.default = ListEvmAccounts;
